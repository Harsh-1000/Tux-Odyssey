
------------------------------------ Linux Commands ----------------------------------

command structure -> command -options arguments
example - ls -a /home

relative paths - are paths that specify a directory/file relative to the current directory
absolute paths - are paths that start from the root directory (they start with a /)

/  - root
~  - home (logged in user home directory)
.  - represent the current working directory
.. - represent the parent directory

1.date	   - print or set the system date and time 

2.ncal	   - displays a calendar

3.man	   - an interface to the system refrence manuals

4.clear    - to clear the terminal screen

5.type	   - display information about command type
	     (man type => "no manual entry for type", instead use "help type" to know about type)

6.echo     - display a line of text

7.sort     - sort lines of text files

8.which    - to find the exact location of an executable 
	     ( this only works for executables, not built-in shell commands or aliases)
	     example - which ls

9.help	   - to find documentation for those commands who do not have man page for them because they are directly built in to the shell
	     example - help type

10.pwd	   - print working directory (where am I ?) : it will print the path of your current working directory start from the root /

11.ls      - it will list the contents of a directory. 
	     (ls - list contents of current directory)
	     (ls path - list the contents of a specific directory. example- ls /bin)
	     (** options example for ls **  -l: for long lasting format, shows more information. | -a: it will also list any hidden files that begin with .)
		
12.cd      - it is used to change the current working directory, "moving" into another directory.
	     (cd .. - "back up" one level into the parent folder)

13.who     - shows who is logged on

14.history - display the history list with line numbers	

15.touch   - (change file timestamp) 
	     update the access and modification times of each FILE to the current time.
	     a FILE argument that does not exist is created empty, unless -c or -h is supplied.

16.file    - determine file type (Note - to determin the file type 3 test - filesystem tests, magictests and language tests)

17.mkdir   - to create new directories

18.nano    - command line editor (other popular editor - vim and emacs)
	     (in windows to use meta key {M} in nano use alt and ios use esc)

19.rm 	   - remove files from machine

20.rm -d   - to remove empty directories
    or 
   rmdir   

21.mv      - to move files and directories from one location to another |  we can also use move command (mv) to rename the file example mv sample.txt new_sample.txt

22.cp      - to create copies of files and folders

23.chmod   - to change the permision

24.su      - to substitute the user

25.sudo    - we can run specific command as the root user by using the sudo commands

26.chown   - to chnage the owner of a file and the file group owner

27.groups  - to show all gruops

28.addgroup - to create new group

29.adduser  - to add user in the group

30.cat      - conCATenate files and print on the standard output

31.less     - to display the contents of a file, one page at a time. we can navigate forwards and backward through the file. (use full for large file)

32.tac      - will concatenate and print files in reverse. It will prints each line of file, starting with the last line.

33.rev      - the prints the content of the by reversing the each line
	      example -"hello" will show as olleh                                       
	
	      **tac** - reverse file lines verticaly (bottom line to top line)   **vertical reverse**
	      **rev** - reverse each line of the file (end of line to start of line)  **horizontal reverse**

34.head     - out put the first part of lines (default 10) (basically print first n lines of file from start)
	      example - head -3 file_name ---> print first three lines from start

35.tail     - out put the last part of the lines (default 10) (basically print last n lines of file from bottom)

36.wc	    - word count command tell us the number of words, lines, or bytes in file. By default, it prints out three numbers: the lines, words, and bytes in a file

37. >       - to redirect standard output  (SYNTAX: command > filename) 

38. >>      - to append standard output as > will overwrite the output. (SYNTAX: command >> filename)

39. <       - to pass the contents of a file to standard input, use the < symbol followed by the filename. (SYNTAX: command < filename)

40. 2>      - to redirect standard error

41. 2>>     - to append the standard error

	      ** WHY 2> ? **
	      Reason - each stream gets its own numeric file descriptor, and for standard error the number is 2, for input its 0 and and for output its 1
	    
	      **** IF WE WANT TO REDIRECT BOTH STANDARD OUTPUT AND STANDARD ERROR TO THE SAME FILE ****
	    
              ex - 1. command &> file1.txt
              2.  command > file1.txt 2> file1.txt  (notice - same file name) 
	      3.  command > file1.txt 2>&1
		
42. |       - [PIPING]  (SYNTAX: command_1 | command_2) we use the pipe character to seperate two commands. The output of the first command will be
              passed to the standard input of the second command.

43. tr      - translate or delete characters

44. tee     - tee program reads standard input and copies it both to standard output AND to a file. This allows us to capture information part of the 
	      way through a pipeline, without interrupting the flow.
