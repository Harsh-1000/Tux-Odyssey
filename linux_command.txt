
------------------------------------ Linux Commands ----------------------------------

command structure -> command -options arguments
example - ls -a /home

relative paths - are paths that specify a directory/file relative to the current directory
absolute paths - are paths that start from the root directory (they start with a /)

/  - root
~  - home (logged in user home directory)
.  - represent the current working directory
.. - represent the parent directory

1.date	   - print or set the system date and time 

2.ncal	   - displays a calendar

3.man	   - an interface to the system refrence manuals

4.clear    - to clear the terminal screen

5.type	   - display information about command type
	     (man type => "no manual entry for type", instead use "help type" to know about type)

6.echo     - display a line of text

7.sort     - sort lines of text files

8.which    - to find the exact location of an executable 
	     ( this only works for executables, not built-in shell commands or aliases)
	     example - which ls

9.help	   - to find documentation for those commands who do not have man page for them because they are directly built in to the shell
	     example - help type

10.pwd	   - print working directory (where am I ?) : it will print the path of your current working directory start from the root /

11.ls      - it will list the contents of a directory. 
	     (ls - list contents of current directory)
	     (ls path - list the contents of a specific directory. example- ls /bin)
	     (** options example for ls **  -l: for long lasting format, shows more information. | -a: it will also list any hidden files that begin with .)
		
12.cd      - it is used to change the current working directory, "moving" into another directory.
	     (cd .. - "back up" one level into the parent folder)

13.who     - shows who is logged on

14.history - display the history list with line numbers	

15.touch   - (change file timestamp) 
	     update the access and modification times of each FILE to the current time.
	     a FILE argument that does not exist is created empty, unless -c or -h is supplied.

16.file    - determine file type (Note - to determin the file type 3 test - filesystem tests, magictests and language tests)

17.mkdir   - to create new directories

18.nano    - command line editor (other popular editor - vim and emacs)
	     (in windows to use meta key {M} in nano use alt and ios use esc)

19.rm 	   - remove files from machine

20.rm -d   - to remove empty directories
    or 
   rmdir   

21.mv      - to move files and directories from one location to another |  we can also use move command (mv) to rename the file example mv sample.txt new_sample.txt

22.cp      - to create copies of files and folders

23.chmod   - to change the permision

24.su      - to substitute the user

25.sudo    - we can run specific command as the root user by using the sudo commands

26.chown   - to chnage the owner of a file and the file group owner

27.groups  - to show all gruops

28.addgroup - to create new group

29.adduser  - to add user in the group

30.cat      - conCATenate files and print on the standard output

31.less     - to display the contents of a file, one page at a time. we can navigate forwards and backward through the file. (use full for large file)

32.tac      - will concatenate and print files in reverse. It will prints each line of file, starting with the last line.

33.rev      - the prints the content of the by reversing the each line
	      example -"hello" will show as olleh                                       
	
	      **tac** - reverse file lines verticaly (bottom line to top line)   **vertical reverse**
	      **rev** - reverse each line of the file (end of line to start of line)  **horizontal reverse**

34.head     - out put the first part of lines (default 10) (basically print first n lines of file from start)
	      example - head -3 file_name ---> print first three lines from start

35.tail     - out put the last part of the lines (default 10) (basically print last n lines of file from bottom)

36.wc	    - word count command tell us the number of words, lines, or bytes in file. By default, it prints out three numbers: the lines, words, and bytes in a file

37. >       - to redirect standard output  (SYNTAX: command > filename) 

38. >>      - to append standard output as > will overwrite the output. (SYNTAX: command >> filename)

39. <       - to pass the contents of a file to standard input, use the < symbol followed by the filename. (SYNTAX: command < filename)

40. 2>      - to redirect standard error

41. 2>>     - to append the standard error

	      ** WHY 2> ? **
	      Reason - each stream gets its own numeric file descriptor, and for standard error the number is 2, for input its 0 and and for output its 1
	    
	      **** IF WE WANT TO REDIRECT BOTH STANDARD OUTPUT AND STANDARD ERROR TO THE SAME FILE ****
	    
              ex - 1. command &> file1.txt
              2.  command > file1.txt 2> file1.txt  (notice - same file name) 
	      3.  command > file1.txt 2>&1
		
42. |       - [PIPING]  (SYNTAX: command_1 | command_2) we use the pipe character to seperate two commands. The output of the first command will be
              passed to the standard input of the second command.

43. tr      - translate or delete characters

44. tee     - tee program reads standard input and copies it both to standard output AND to a file. This allows us to capture information part of the 
	      way through a pipeline, without interrupting the flow

45 *        - wildcard character (aka globbing pattern)  - it represents zero or more characters in a filename.
	      example- 
                  1. ls *txt - will match any files that end with txt like linux_command.txt
                  2. ls s*   - will match any files that start with s like shopping_list

46. ?       - this wildcard character represents any single character.
	      ex - ls ??.txt output - as.txt df.txt 23.txt but not qwr.txt

47. []      - inside of square brackets we can specify a range of characters to match.
              ex - ls pic[1-9].png -- output - pic1.png , pic2.png, pic9.png but not pic0.png because 0 in not in range [1-9] 
                   ls text[abc].txt -- texta.txt ,textb.txt, testc.txt

48. [^]     - inside of square brackets [] we can specify a range of characters to NOT match, using caret(^)
	      ex - ls [^a]* - b.txt c.txt dfcd.txt dfv  but not the one which start from a

49. {}      - is used to generate arbitrary strings. Basically, it will generate multiple strings for us based on pattern
              ex - touch page{1,2,6}.txt -- output - page1.txt page2.txt page6.txt
                   touch momo{1..5}.txt -- output - momo1.txt momo2.txt momo3.txt momo4.txt momo5.txt  (1..5 ---> means 1 to 5)
                   {1..10..2} range output 1 3 5 7 9 (1 -start 10 - end 2 - step)
                   echo {x,y{1..5},z} - x y1 y2 y3 y4 y5 z

50. $((expension)) - the shell will perform arithmetic via expension using this syntax. inside the parantheses, we can right arithmetic expressions using : + - * % / **(exponentiation)  
                     ex- touch $((10+5)).txt -- output 15.txt

51. "" (double quotes)    -     &, \ , ` will still have their special meaning inside "" other special character will be ognore
			        ex -  echo  "d   {1,2,4}"  -- output - d   {1,2,4} 
                                      but -- echo " r  $((10+5))" -- output - r   15
52. ''(single quotes)     -  all special characters will be ignore means echo "r   $((10+5))"  -- output - r   ((10+5))
                             it suppress all form of substitution

53. $(command)   - command substitution - we can use this syntax to display the output of another command.
                   ex - echo "today date is $(date)" -- output - today date is Sat Jan 18 12:21:57 UTC 2025 
                  
                   **we can also use** - echo `command`  to run show command using echo.  example - echo `date` - Sat Jan 18 12:21:57 UTC 2025
		   but `date` will give error reason 
                   
	          In Linux backticks (`command`) are used for command substitution. This means 
                  1. the shell runs the command inside the backticks ``.
                  2. the output of command replaces in your current command line.

54. tree     - list content of directories in tree like format 

55. locate   - find files by name, quickly

56. find     - search for files in a directory hierarchy
	       
               ***find by name*** 
               example - find -name "todos.txt"  -> to find all the files name todos.txt with in the current directory
		         find ~/Desktop -name "*txt"  ->  to find all the files end with .txt in specified directory

              use -iname for case insenstive search

	      ** user defined actions **
              find -name "seach-criteria" -exec command '{}' ';'    example - find -name "todos.txt" -exec ls -l '{}' ';' 
              or - use ** xargs command ** - when we provide a command via -exec, that command is executed separately for every single element.
              we can instead use a special command called **xargs** to build up the input into a bundle that will be provided as an 
              argument list to the next command.

              find -name "*.txt" | xargs ls
 

    	      **** Timestamps ****

		1. mtime - modification time - is when a file was last modifed AKA when its content last changed. 
	        2. ctime - change time - is when a file was last changed. This occurs anytime mtime chnages but also when we rename a file, move it or alter permissions (try ls -l -c)
	        3. atime - access time - is updated when a file is ready by an application or a command like cat. (try ls -l -u)

	      ******************
            
	      **** Logical Operator ****
        
       		 1. -and 
        	 2. -or
       		 3. -not

	      **************************

57. grep - commands searches for pattern in each file's contents. grep will print each line that matches a pattern we provide.
         
    **** Regex Crash Course ****
     
    .	   -  matches any single character
    ^      -  matches the start of a line 
    $      -  matches the end of a line
    [abc]  -  matches any character in the set
    [^abc] -  matches any char NOT in set
    *      -  repeat previous expression 0 or more times
    \      -  escape meta-characters

58. printenv - to view the enviroment values and their current values

*** Parameter Expension ***
If we write out the name of an enviroment variable prefixed with a dollar sign ($), the shell will replace it with the actual value.

ex - echo USER   -- output - USER
     echo $USER  -- output - luffy
 
** Defining Variable **
variable = content   -- local shell variable
export variable = content  -- save variable in enviroment

.bashrc - to customize terminal 

source .bashrc - to reflect change in current opened terminal
**Aliases**

59. alias  - we can define our own commands using the alias keyword
	example - alias xy='ls -al'

** Cron **

crontab -e   -> we need to edit the crontab configuration file.

Cron Syntax  -    a      b	c	d	  e           command
                minute  hour   day    month   day(of week)
                 0-59   0-23   1-31   1-12       0-6

Cron characters

*    -  any character (all)
5,6  -  list of values (5 and 6)
1-4  -  range of values (1 to 4)
*/5  -  step values (every 5th)

ex -  30 6 * * * command --> run a job every day at 6:30AM
tip -use - crontab guru (website) for help

ex - * * * * * echo "hello time $(date)" >> time.log 2>&1

60. tar  - command is use to compress file in linux


**** soem useful shortcut ****  

cntrl + a --> start of command 
cntrl + e --> end of command

alt + b  --> move backward one word at a time
alt + f  --> move forward one word at a time

cntrl + r --> search history

history -- store in ~/.bash_history file.
